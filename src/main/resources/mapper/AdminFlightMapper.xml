<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.air.future.dao.AdminFlightMapper">

<!-- 비행일정 -->

	<!-- 비행일정 리스트 검색 -->
	<select id="routeList" resultType="HashMap" parameterType="HashMap">
		select r.* , a.airplane_id from route_fa r, airplane_fa a
		where r.airplane_id = a.airplane_id 
		and to_char(r.departure_date, 'YYYY-MM-DD') <![CDATA[ < ]]>= #{departure_date_end}
		and to_char(r.departure_date, 'YYYY-MM-DD') >= #{departure_date_start}
		<if test="departure_name != ''">
		and r.departure_name = #{departure_name}
		</if>
		<if test="arrival_name != ''">
		and r.arrival_name = #{arrival_name}
		</if>
		<if test="route_num != ''">
		and r.route_num = #{route_num}
		</if>
		order by r.departure_date, r.route_num
	</select>
	
	<!-- 비행일정 갯수 검색 -->
	<select id="getRouteTotal" resultType="int" parameterType="HashMap">
		select count(*) from route_fa r, airplane_fa a
		where r.airplane_id = a.airplane_id 
		and to_char(r.departure_date, 'YYYY-MM-DD') <![CDATA[ < ]]>= #{departure_date_end}
		and to_char(r.departure_date, 'YYYY-MM-DD') >= #{departure_date_start}
		<if test="departure_name != ''">
		and r.departure_name = #{departure_name}
		</if>
		<if test="arrival_name != ''">
		and r.arrival_name = #{arrival_name}
		</if>
		<if test="route_num != ''">
		and r.route_num = #{route_num}
		</if>
	</select>
	
	<!-- 비행일정 검색 -->
	<select id="getRoute" parameterType="String" resultType="HashMap">
		select * from route_fa r, airplane_fa a 
			where r.route_num = #{r.route_num}
			and r.airplane_id = a.airplane_id
	</select>
	
	<!-- 비행일정 추가 -->
	<insert id="insertFlight">
		insert into route_fa values(
			concat('F' , lpad(route_index_seq.nextval, 5, '0')), 
			#{airplane_id}, 
			TO_DATE(#{departure_date}, 'YYYY-MM-DD HH24:MI:SS'), 
			TO_DATE(#{arrival_date}, 'YYYY-MM-DD HH24:MI:SS'), 
			#{departure_name}, 
			#{arrival_name}, 
			trunc((TO_DATE(#{arrival_date}, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(#{departure_date}, 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60), 
			#{normal_price}, 
			#{prestige_price}, 
			#{first_price})
	</insert>
	
	<!-- 비행일정 업데이트 -->
	<update id="updateFlight">
		update route_fa 
		set 
			departure_date = TO_DATE(#{departure_date}, 'YYYY-MM-DD HH24:MI:SS'), 
			arrival_date = TO_DATE(#{arrival_date}, 'YYYY-MM-DD HH24:MI:SS'), 
			departure_name = #{departure_name}, 
			arrival_name = #{arrival_name},
			eta = trunc((TO_DATE(#{arrival_date}, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(#{departure_date}, 'YYYY-MM-DD HH24:MI:SS')) * 24 * 60), 
			normal_price = #{normal_price},
			prestige_price = #{prestige_price},
			first_price = #{first_price}
		where 
			route_num = #{route_num}
	</update>
	
	<!-- 비행일정 삭제 -->
	<delete id="deleteRoute" parameterType="String"> 
		delete from route_fa
		where route_num = #{route_num}
	</delete>
	
	<!-- 비행번호의 예약된 갯수 -->
	<select id="getReservationCountByRoutrnum" resultType="int" parameterType="String">
		select count(*) from schedule_fa where route_num = #{route_num}
	</select>
	
	

	<!-- 비행기 리스트 검색 -->
	<select id="getAirplaneList" resultType="airplane">
		select * from airplane_fa
	</select>
	
	<!-- 비행일정상세 - 예약현황 -->
	<select id="getReservationByRoutenum" parameterType="String" resultType="HashMap">
		select * from reservation_fa r, schedule_fa s
		where r.reservation_num = s.reservation_num
		and s.route_num = #{route_num}
		order by r.reservation_date
	</select>
	
	<!-- 비행일정상세갯수 - 예약현황 -->
	<select id="getReservationByRoutenumTotal" parameterType="String" resultType="int">
		select count(*) from reservation_fa r, schedule_fa s
		where r.reservation_num = s.reservation_num
		and s.route_num = #{route_num}
	</select>
	

<!-- 예약현황 -->	
   <!-- 예약일정리스트 -->
   <select id="reservationList" parameterType="HashMap" resultType="HashMap">
   	select a.*,  case when b.count = '1' then '편도'when b.count = '2' then '왕복' else '다구간' end as reservation_type  from 
    (select s.reservation_num, r.customer_id, s.passenger_name, rou.departure_name, rou.arrival_name, rou.departure_date, r.reservation_date, r.payment, r.reservation_state
        from reservation_fa r, schedule_fa s, route_fa rou, customer_fa c
        where r.reservation_num = s.reservation_num
		    and s.route_num = rou.route_num
		    and r.customer_id = c.customer_id
		    and c.customer_id = s.customer_id
		    and s.type = '여정1'
		    <if test="departure_date_start != ''">
            and to_char(rou.departure_date, 'YYYY-MM-DD') >= #{departure_date_start}
			</if>
			<if test="departure_date_end != ''">
			   and to_char(rou.departure_date, 'YYYY-MM-DD') <![CDATA[ < ]]>= #{departure_date_end}
			</if>
			<if test="reservation_date_start != ''">
			  and to_char(r.reservation_date, 'YYYY-MM-DD') >= #{reservation_date_start}
			</if>
			<if test="reservation_date_end != ''">
			  and to_char(r.reservation_date, 'YYYY-MM-DD') <![CDATA[ < ]]>= #{reservation_date_end}
			 </if>
			<if test="departure_name != ''">
			and rou.departure_name = #{departure_name}
			</if>
			<if test="arrival_name != ''">
			and rou.arrival_name = #{arrival_name}
			</if>
			<if test="customer_name != ''">
			and c.customer_name like  '%'||#{customer_name}||'%'
			</if>
			<if test="reservation_num != ''">
			and r.reservation_num = #{reservation_num}
			</if>
		group by s.reservation_num, r.customer_id,  s.passenger_name, rou.departure_name, rou.arrival_name, rou.departure_date, r.reservation_date, r.payment, r.reservation_state) a,
		(select reservation_num, count(*) count from (
		    select s.reservation_num, s.type
		            from reservation_fa r, schedule_fa s
		        where r.reservation_num = s.reservation_num
		    group by s.reservation_num, s.type) a
		group by reservation_num) b
	where a.reservation_num = b.reservation_num
	order by a.reservation_date desc
   </select>
   
	<!-- 예약일정갯수 -->
	<select id="getReservationTotal" parameterType="HashMap" resultType="int">
		select count(*)
		    from reservation_fa r, schedule_fa s, route_fa rou, customer_fa c
	        where r.reservation_num = s.reservation_num
		    and s.route_num = rou.route_num
		    and r.customer_id = c.customer_id
		    and c.customer_id = s.customer_id
		    and s.type = '여정1'
		    <if test="departure_date_start != ''">
            and to_char(rou.departure_date, 'YYYY-MM-DD') >= #{departure_date_start}
			</if>
			<if test="departure_date_end != ''">
			   and to_char(rou.departure_date, 'YYYY-MM-DD') <![CDATA[ < ]]>= #{departure_date_end}
			</if>
			<if test="reservation_date_start != ''">
			  and to_char(r.reservation_date, 'YYYY-MM-DD') >= #{reservation_date_start}
			</if>
			<if test="reservation_date_end != ''">
			  and to_char(r.reservation_date, 'YYYY-MM-DD') <![CDATA[ < ]]>= #{reservation_date_end}
			 </if>
			<if test="departure_name != ''">
			and rou.departure_name = #{departure_name}
			</if>
			<if test="arrival_name != ''">
			and rou.arrival_name = #{arrival_name}
			</if>
			<if test="customer_name != ''">
			and c.customer_name like  '%'||#{customer_name}||'%'
			</if>
	</select>
	
	<!-- 예약취소 시 마일리지감소 -->	
	<insert id="insertMileage" parameterType="String">
		insert into mileage_fa (mileage_index, mileage_id, mileage_date, mileage_type, mileage_reservation, mileage_point) 
		select MILEAGE_INDEX_SEQ.nextval mileage_index, mileage_id, sysdate mileage_date, '결제취소' mileage_type, mileage_reservation , mileage_point * -1 mileage_point 
		from mileage_fa 
		where mileage_reservation = #{reservation_num}
	</insert>
	
	<!-- 예약취소 -->
	<update id="reservationCancle" parameterType="String">
		update reservation_fa
		set reservation_state = '예약취소'
		where reservation_num = #{reservation_num}
	</update>
	
	
	
	
<!-- 공통 -->	
	<!-- 취향지리스트 -->
	<select id="destinationList" resultType="destination" parameterType="String">
		select * from destination_fa
		where continents = #{continents}
	</select>
	
	<!-- 대륙리스트 -->
	<select id="continentsList" resultType="String" parameterType="String">
		select distinct continents from destination_fa
	</select>
	
	
	
</mapper>

